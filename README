
                               README

a. Adam Reynolds

b. 2433-2688-40

c. I have completed all three phases of the assignment. I implemented two
   client programs, a main server program, and three back-end server programs
   as specified in the assignment. 

d. I have 6 .c files in the src/ folder, corresponding to the 6 applications to
   be run. clientA.c and clientB.c are the client files, serverM.c is the main
   server file, and serverA.c, serverB.c, serverC.c are the back-end server
   files.  I also have 7 .h files in the include/ folder: one for each of the
   .c files, and one called "globals.h" that contains global imports and shared
   data structures. 

e. The format of each message is specified in "include/globals.h". The
   ClientRequest struct is used for messages from client to main server, with
   the ClientResponse being the corresponding response. Similarly, the
   ServerRequest struct is used for messages from the main server to back-end
   servers, with the ServerResponse struct used for the corresponding
   responses.

g. There are several things to note about my project, some of which are covered
   in piazza posts:

   1. I could not run my virtual machine on my computer, so I am using a rented
      aws ubuntu 16.04 instance, as recommended by an instructor in piazza post
      @10. I have compiled and executed my code only on this machine.
 
   2. My back-end servers are only guaranteed to work on starter block files
      that end in a newline character. This is in line with an instructor's
      response on piazza post @390, but not in line with the example starter
      blocks (block3.txt does not end in a newline character).

   3. All .txt files, which are "block1.txt", "block2.txt", "block3.txt", and 
      "alichain.txt" must be in the src/ folder to be read and written to. This
      is in line with the instructor response in piazza post @428.

   4. Since the log files stored in the back-end could potentially be very
      long, after the back-end receives a request to send its transaction log,
      it sends a UDP message for *each line* in the log, followed by an empty
      message that indicates that it has finished sending. The main server will
      block until the final message is received. So this protocol will fail if
      the final message is lost, which is possible, but unlikely, over UDP on
      a localhost. 

   5. The main server will not listen on multiple sockets. Instead, it will 
      only accept messages in the following order: A, B, A, B, A, ...

h. I did not reuse any code. I based all my code on my own knowledge and
   function specifications from class and man pages. 
